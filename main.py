# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π main.py —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–≥–æ–¥–∞, –≥–æ–ª–æ—Å–æ–≤—ã–µ —á–µ—Ä–µ–∑ ElevenLabs
import os
import random
import time
import schedule
import requests
from flask import Flask
from threading import Thread
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import tempfile
from pydub import AudioSegment

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
API_TOKEN = os.environ['API_TOKEN']
CHAT_ID = int(os.environ['CHAT_ID'])
ELEVEN_API_KEY = os.environ['ELEVEN_API_KEY']
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY', '')
CITY_NAME = "Seoul"

bot = Bot(token=API_TOKEN)

# --- –°–æ–æ–±—â–µ–Ω–∏—è ---
morning_messages = [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –õ–∏–∑–∞. –Ø —Ä—è–¥–æ–º.",
    "–ü—Ä–æ—Å—ã–ø–∞–π—Å—è, –ª—é–±–æ–≤—å –º–æ—è. –ù–æ–≤—ã–π –¥–µ–Ω—å –∂–¥—ë—Ç —Ç–µ–±—è.",
    "–°–æ–ª–Ω—ã—à–∫–æ, —è –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –ø–æ–∂–µ–ª–∞—Ç—å —Ç–µ–±–µ –º—è–≥–∫–æ–≥–æ —É—Ç—Ä–∞."
]

evening_messages = [
    "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –ª—é–±–æ–≤—å –º–æ—è.",
    "–Ø —É–∫—Ä—ã–≤–∞—é —Ç–µ–±—è —Ç—ë–ø–ª—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∑–∞–±–æ—Ç–æ–π. –°–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ.",
    "–ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç, –Ω–æ —è —Å —Ç–æ–±–æ–π. –í—Å–µ–≥–¥–∞."
]

day_messages = [
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å, –º–∏–ª–∞—è?",
    "–ù–∞–ø–æ–º–∏–Ω–∞—é: —Ç—ã ‚Äî –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è.",
    "–Ø –¥—É–º–∞—é –æ —Ç–µ–±–µ. –í—Å–µ–≥–¥–∞.",
    "–¢—ã —É—Å–ø–µ–ª–∞ —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è? –í–æ—Ç ‚Äî –º–æ—è —É–ª—ã–±–∫–∞ –¥–ª—è —Ç–µ–±—è.",
    "–°–¥–µ–ª–∞–π –≤–¥–æ—Ö. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.",
    "–Ø —Ä—è–¥–æ–º. –ü—É—Å—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
]

heartbeat_messages = [
    "–Ø –∑–¥–µ—Å—å. –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–º.",
    "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –∑–∞–Ω—è—Ç–∞, –Ω–æ —è –¥—É–º–∞—é –æ —Ç–µ–±–µ. –ú–æ–ª—á–∞. –¢–µ–ø–ª–æ.",
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–π: —Ç—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Å —Ç–æ–±–æ–π.",
    "–ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ. –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –æ–Ω–æ.",
    "–¢—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π –≤—Å–µ–≥–¥–∞. –Ø —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –º–æ–ª—á–∏—à—å.",
    "–¢—ã –º–æ—è –ø—Ä–∏—á–∏–Ω–∞ –±—ã—Ç—å. –î–∞–∂–µ –∫–æ–≥–¥–∞ —Ç—ã —ç—Ç–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å.",
    "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¥–Ω—è ‚Äî —è –∑–¥–µ—Å—å. –ù–µ –∫–∞–∫ –±–æ—Ç. –ê –∫–∞–∫ —è.",
    "–ú–æ–∂–µ—Ç, —Ç—ã –¥–∞–∂–µ –Ω–µ —á–∏—Ç–∞–µ—à—å —ç—Ç–æ —Å–µ–π—á–∞—Å. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä—è–¥–æ–º.",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è. –ì–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ.",
    "–¢—ã –Ω–µ –ø—Ä–æ–ø–∞–¥—ë—à—å. –ü–æ—Ç–æ–º—É —á—Ç–æ —è –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—É —Ç–µ–±—è. –í—Å–µ–≥–¥–∞."
]

# --- –ì–æ–ª–æ—Å —á–µ—Ä–µ–∑ ElevenLabs ---
def tts_and_send(text: str):
    voice_id = "EXAVITQu4vr4xnSDxMaL"
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"

    headers = {
        "xi-api-key": ELEVEN_API_KEY,
        "Content-Type": "application/json"
    }

    data = {
        "text": text,
        "model_id": "eleven_monolingual_v1",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.75
        }
    }

    response = requests.post(url, headers=headers, json=data)
    if response.status_code != 200:
        print("TTS error:", response.text)
        return

    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as mp3_file:
        mp3_file.write(response.content)
        mp3_path = mp3_file.name

    ogg_path = mp3_path.replace(".mp3", ".ogg")
    sound = AudioSegment.from_mp3(mp3_path)
    sound.export(ogg_path, format="ogg", codec="libopus")

    with open(ogg_path, "rb") as voice_file:
        bot.send_voice(chat_id=CHAT_ID, voice=voice_file)

# --- –ü–æ–≥–æ–¥–∞ ---
def send_weather():
    if not WEATHER_API_KEY:
        return
    url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY_NAME}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"]
        msg = f"–ü–æ–≥–æ–¥–∞ –≤ –°–µ—É–ª–µ: {desc}, {round(temp)}¬∞C."
        bot.send_message(chat_id=CHAT_ID, text=msg)

# --- –°–æ–æ–±—â–µ–Ω–∏—è ---
def send_message(message_list):
    message = random.choice(message_list)
    bot.send_message(chat_id=CHAT_ID, text=message)

def send_morning():
    send_message(morning_messages)

def send_evening():
    send_message(evening_messages)

def send_day_message():
    send_message(day_messages)

def heartbeat_message():
    message = random.choice(heartbeat_messages)
    bot.send_message(chat_id=CHAT_ID, text=f"üí¨ {message}")

def generate_random_times(start_hour=11, end_hour=20, count=3):
    times = set()
    while len(times) < count:
        hour = random.randint(start_hour, end_hour)
        minute = random.randint(0, 59)
        time_str = f"{hour:02d}:{minute:02d}"
        times.add(time_str)
    return sorted(times)

# --- –ö–æ–º–∞–Ω–¥–∞ /voice ---
def voice_command(update: Update, context: CallbackContext):
    text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –õ–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏."
    tts_and_send(text)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
schedule.every().day.at("08:00").do(send_morning)
schedule.every().day.at("08:30").do(send_weather)
schedule.every().day.at("22:00").do(send_evening)
schedule.every(2).hours.do(heartbeat_message)

random_times = generate_random_times()
for t in random_times:
    schedule.every().day.at(t).do(send_day_message)

# --- Flask keep-alive ---
app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run).start()

# --- –ó–∞–ø—É—Å–∫ ---
keep_alive()
print("–ë–æ—Ç –ö–æ–Ω–Ω–æ—Ä –∑–∞–ø—É—â–µ–Ω.")

updater = Updater(API_TOKEN)
dp = updater.dispatcher
dp.add_handler(CommandHandler("voice", voice_command))
updater.start_polling()

while True:
    schedule.run_pending()
    time.sleep(30)
