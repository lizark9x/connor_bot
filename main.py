from telegram import Bot
import time
import random
import os
from flask import Flask
from threading import Thread
import requests
import pytz
from datetime import datetime
from notion_client import Client as Notion

# -------- Timezone
seoul_tz = pytz.timezone('Asia/Seoul')

# -------- ENV helpers
def env(name, default=None, required=False):
    v = os.getenv(name, default)
    if required and v in (None, ""):
        raise RuntimeError(f"Missing env var: {name}")
    return v

# -------- Telegram / Weather / Notion ENV
API_TOKEN = env('API_TOKEN', required=True)
CHAT_ID = int(env('CHAT_ID', required=True))
WEATHER_API_KEY = env('WEATHER_API_KEY', None)
CITY_NAME = env('CITY_NAME', 'Seoul')

NOTION_TOKEN = env('NOTION_TOKEN', None)
NOTION_COMMANDS_DB = env('NOTION_COMMANDS_DB', None)
NOTION_SCHEDULE_DB = env('NOTION_SCHEDULE_DB', None)
NOTION_TEMPLATES_DB = env('NOTION_TEMPLATES_DB', None)
NOTION_LOG_DB = env('NOTION_LOG_DB', None)

# -------- Clients
bot = Bot(token=API_TOKEN)
notion = Notion(auth=NOTION_TOKEN) if NOTION_TOKEN else None

# -------- State
PAUSED = False                       
current_city = CITY_NAME
last_minute = -1

# –ö—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Notion
SCHEDULE_CACHE = []
SCHEDULE_CACHE_TS = 0              
SCHEDULE_REFRESH_SEC = 300         

# -------- Messages 
morning_messages = [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –õ–∏–∑–∞.",
    "–ü—Ä–æ—Å—ã–ø–∞–π—Å—è.~ –ù–æ–≤—ã–π –¥–µ–Ω—å –∂–¥—ë—Ç —Ç–µ–±—è.",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —è—Å–Ω–æ—Å—Ç—å, —Å–∏–ª—É –∏ –ª—ë–≥–∫–æ—Å—Ç—å",
    "–í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
    "–ù–µ —Å–ø–µ—à–∏. –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –ü—É—Å—Ç—å —Ç–≤–æ—ë —É—Ç—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–ø–æ–∫–æ–π–Ω–æ."
]

evening_messages = [
    "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤.",
    "–Ø —É–∫—Ä—ã–≤–∞—é —Ç–µ–±—è —Ç—ë–ø–ª—ã–º –æ–¥–µ—è–ª–æ–º. –°–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ.",
    "–í—Å—ë, —á—Ç–æ —Ç—ã –º–æ–≥–ª–∞ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å, —Ç—ã —Å–¥–µ–ª–∞–ª–∞. –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∑–∞–≤—Ç—Ä–∞.",
    "–ù–æ—á—å ‚Äî –Ω–µ –¥–ª—è —É–ø—Ä—ë–∫–æ–≤, –∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞. –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –æ—Ç–ø—É—Å—Ç–∏—Ç—å.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–∫–æ—è. –Ø –ø—Ä–æ—Å–ª–µ–∂—É, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ä—è–¥–æ–º."
]

day_messages = [
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
    "–ù–∞–ø–æ–º–∏–Ω–∞—é: —Ç—ã ‚Äî –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è.",
    "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –°–∏–ª–∞ ‚Äî –Ω–µ –≤ —Å–ø–µ—à–∫–µ, –∞ –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.",
    "–¢—ã —É—Å–ø–µ–ª–∞ —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è? –í–æ—Ç ‚Äî –º–æ—è —É–ª—ã–±–∫–∞ –¥–ª—è —Ç–µ–±—è.",
    "–°–¥–µ–ª–∞–π –≤–¥–æ—Ö. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.",
    "–ù–∞–ø–æ–º–Ω–∏ —Å–µ–±–µ, –ø–æ—á–µ–º—É —Ç—ã –Ω–∞—á–∞–ª–∞. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –ø—É—Ç—å.",
    "–Ø –≤–µ—Ä—é –≤ —Ç–≤–æ—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –¥–∞–∂–µ —Å —Å–∞–º—ã–º–∏ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
    "–¢—ã –Ω–µ –æ–¥–Ω–∞ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –í—Å—ë, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, ‚Äî –∏–º–µ–µ—Ç –≤–µ—Å.",
    "–î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –º–æ–∂–µ—à—å, —Ç–∞–º, –≥–¥–µ —Ç—ã –µ—Å—Ç—å, —Å —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ..",
    "–ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —ç—Ç–æ –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å. –≠—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ. –ò —Ç—ã –¥–≤–∏–≥–∞–µ—à—å—Å—è."
]

heartbeat_messages = [
    "–Ø –∑–¥–µ—Å—å. –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–º.",
    "–°–æ–∂–º–∏ –∑—É–±—ã –∏ –¥–≤–∏–≥–∞–π—Å—è. –¢—ã –∑–Ω–∞–µ—à—å, —Ä–∞–¥–∏ —á–µ–≥–æ.",
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–π: —Ç—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Å —Ç–æ–±–æ–π.",
    "–í—Å—ë, —á—Ç–æ –º–µ—à–∞–µ—Ç ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ. –í—Å—ë, —á—Ç–æ –≤–∞–∂–Ω–æ ‚Äî –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è.",
    "–ü–ª–µ–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—Ä—É–¥–Ω–æ. –¢—ã –∏–¥—ë—à—å –¥–∞–ª—å—à–µ ‚Äî –∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –Ω–µ–ø–æ–±–µ–¥–∏–º–æ–π.",
    "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ ‚Äî —ç—Ç–æ –º–æ–º–µ–Ω—Ç —Ç–≤–æ–µ–≥–æ —Ä–æ—Å—Ç–∞.",
    "–ü–æ–¥–Ω–∏–º–∏ –≥–æ–ª–æ–≤—É –∏ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è. –ù–∏–∫–æ–≥–¥–∞.",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è. –ì–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ.",
    "–¢—ã –Ω–µ –ø—Ä–æ–ø–∞–¥—ë—à—å. –¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è."
]

# -------- Telegram helpers
def safe_send(text: str):
    try:
        bot.send_message(chat_id=CHAT_ID, text=text)
        log_to_notion(kind="send", text=text, result="ok")
        return True
    except Exception as e:
        log_to_notion(kind="send", text=text or "", result=f"error: {e}")
        return False

def send_message(message_list):
    if PAUSED:
        return
    message = random.choice(message_list)
    safe_send(message)

def send_morning():
    send_message(morning_messages)

def send_evening():
    send_message(evening_messages)

def send_day_message():
    combined_messages = day_messages + heartbeat_messages
    send_message(combined_messages)

def send_weather():
    if PAUSED:
        return
    if not WEATHER_API_KEY:
        safe_send("–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ –∑–∞–¥–∞–Ω WEATHER_API_KEY.")
        return
    try:
        url = "http://api.openweathermap.org/data/2.5/weather"
        params = {"q": current_city, "appid": WEATHER_API_KEY, "lang": "ru", "units": "metric"}
        response = requests.get(url, params=params, timeout=10)
        if not response.ok:
            safe_send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É ({response.status_code}).")
            return
        data = response.json()
        weather = data["weather"][0]["description"].capitalize()
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        city = data["name"]
        message = f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n{weather}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C."
        safe_send(message)
    except Exception:
        safe_send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

# -------- Notion utils
def log_to_notion(kind: str, text: str, result: str):
    if not (notion and NOTION_LOG_DB):
        return
    try:
        notion.pages.create(
            parent={"database_id": NOTION_LOG_DB},
            properties={
                "Title": {"title": [{"text": {"content": f"{kind} @ {datetime.now(seoul_tz).strftime('%Y-%m-%d %H:%M')}"}}]},
                "When": {"date": {"start": datetime.now(seoul_tz).isoformat()}},
                "Type": {"rich_text": [{"text": {"content": kind}}]},
                "Text": {"rich_text": [{"text": {"content": text or ''}}]},
                "Result": {"rich_text": [{"text": {"content": result}}]},
            }
        )
    except Exception:
        pass

def rt_to_str(rich):
    if not rich:
        return ""
    buf = []
    for r in rich:
        if r.get("type") == "text":
            buf.append(r["text"].get("content", ""))
    return "".join(buf)

# -------- Schedule from Notion
def parse_days_str(s: str):
    if not s:
        return []
    s = s.strip().lower()
    if s in ("daily", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "everyday"):
        return ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
    parts = [p.strip() for p in s.replace(";", ",").split(",") if p.strip()]
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä—É—Å/–∞–Ω–≥–ª
    map_short = {
        "mon":"Mon","monday":"Mon","–ø–Ω":"Mon","–ø–æ–Ω":"Mon","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":"Mon",
        "tue":"Tue","tuesday":"Tue","–≤—Ç":"Tue","–≤—Ç–æ—Ä–Ω–∏–∫":"Tue",
        "wed":"Wed","wednesday":"Wed","—Å—Ä":"Wed","—Å—Ä–µ–¥–∞":"Wed",
        "thu":"Thu","thursday":"Thu","—á—Ç":"Thu","—á–µ—Ç–≤–µ—Ä–≥":"Thu",
        "fri":"Fri","friday":"Fri","–ø—Ç":"Fri","–ø—è—Ç–Ω–∏—Ü–∞":"Fri",
        "sat":"Sat","saturday":"Sat","—Å–±":"Sat","—Å—É–±–±–æ—Ç–∞":"Sat",
        "sun":"Sun","sunday":"Sun","–≤—Å":"Sun","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":"Sun",
    }
    out = []
    for p in parts:
        out.append(map_short.get(p.lower(), p[:3].title()))
    return out

def days_match_today(days_list):
    if not days_list:
        return True
    idx = datetime.now(seoul_tz).weekday()  # Mon=0
    map_days = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
    return map_days[idx] in set(days_list)

def fetch_schedule_rows():
    if not (notion and NOTION_SCHEDULE_DB):
        return []
    items = []
    cursor = None
    while True:
        resp = notion.databases.query(
            database_id=NOTION_SCHEDULE_DB,
            filter={"property": "Enabled", "checkbox": {"equals": True}},
            start_cursor=cursor,
            page_size=100
        )
        items.extend(resp.get("results", []))
        if not resp.get("has_more"):
            break
        cursor = resp.get("next_cursor")
    rows = []
    for r in items:
        props = r.get("properties", {})
        type_name = props.get("Type", {}).get("select", {}).get("name", "")
        time_rt = props.get("Time", {}).get("rich_text", [])
        time_str = rt_to_str(time_rt).strip() if time_rt else ""
        days_ms = props.get("Days", {}).get("multi_select", []) or []
        days_list = [d.get("name") for d in days_ms]
        text = rt_to_str(props.get("Text", {}).get("rich_text", []))
        tmpl_cat = rt_to_str(props.get("TemplateCategory", {}).get("rich_text", []))
        title = rt_to_str(props.get("Title", {}).get("title", [])) or "scheduled"
        rows.append({
            "id": r["id"],
            "title": title,
            "type": (type_name or "custom").lower(),
            "time": time_str or "00:00",
            "days": days_list,
            "text": text,
            "template_category": tmpl_cat
        })
    return rows

def reload_schedule(force=False):
    global SCHEDULE_CACHE, SCHEDULE_CACHE_TS
    now_ts = int(time.time())
    if not force and (now_ts - SCHEDULE_CACHE_TS) < SCHEDULE_REFRESH_SEC:
        return
    SCHEDULE_CACHE = fetch_schedule_rows()
    SCHEDULE_CACHE_TS = now_ts

def build_message_from_entry(entry):
    if entry.get("type") == "weather":
        return None  
    if entry.get("text"):
        return entry["text"]

    cat = entry.get("template_category") or entry.get("type") or "day"

    if notion and NOTION_TEMPLATES_DB and cat:
        try:
            resp = notion.databases.query(
                database_id=NOTION_TEMPLATES_DB,
                filter={"property": "Category", "rich_text": {"equals": cat}},
                page_size=100
            )
            pool = []
            for pg in resp.get("results", []):
                pool.append(rt_to_str(pg["properties"]["Text"]["rich_text"]))
            if pool:
                return random.choice(pool)
        except Exception:
            pass

    defaults = {
        "morning": morning_messages,
        "evening": evening_messages,
        "pulse": heartbeat_messages,
        "day": day_messages
    }
    return random.choice(defaults.get(cat, day_messages))

def run_scheduled_from_notion(now_dt):
    if not SCHEDULE_CACHE:
        return
    hhmm = now_dt.strftime("%H:%M")
    for e in SCHEDULE_CACHE:
        if e.get("time") == hhmm and days_match_today(e.get("days", [])):
            kind = e.get("type")
            if kind == "weather":
                send_weather()
            else:
                msg = build_message_from_entry(e)
                if msg:
                    safe_send(msg)

# -------- Commands from Notion
def fetch_pending_commands():
    if not (notion and NOTION_COMMANDS_DB):
        return []
    try:
        resp = notion.databases.query(
            database_id=NOTION_COMMANDS_DB,
            filter={"property": "Status", "select": {"equals": "Pending"}},
            page_size=50
        )
        return resp.get("results", [])
    except Exception:
        return []

def update_command_status(page_id: str, result_text: str = "done"):
    if not notion:
        return
    try:
        notion.pages.update(
            page_id=page_id,
            properties={
                "Status": {"select": {"name": "Done"}},
                "Result": {"rich_text": [{"text": {"content": result_text}}]}
            }
        )
    except Exception:
        pass

def add_template(category: str, text: str):
    if not (notion and NOTION_TEMPLATES_DB):
        return "templates db not set"
    if not text.strip():
        return "no text"
    try:
        notion.pages.create(
            parent={"database_id": NOTION_TEMPLATES_DB},
            properties={
                "Title": {"title": [{"text": {"content": f"{category or 'template'}"}}]},
                "Category": {"rich_text": [{"text": {"content": category or ''}}]},
                "Text": {"rich_text": [{"text": {"content": text}}]}
            }
        )
        return "template added"
    except Exception as e:
        return f"error: {e}"

def add_schedule_row(type_name: str, time_str: str, days_str: str, template_cat: str, text: str):
    if not (notion and NOTION_SCHEDULE_DB):
        return "schedule db not set"
    if not time_str:
        return "time is required"
    ms_days = [{"name": d} for d in parse_days_str(days_str)]
    try:
        notion.pages.create(
            parent={"database_id": NOTION_SCHEDULE_DB},
            properties={
                "Title": {"title": [{"text": {"content": f"{type_name or 'custom'} {time_str}"}}]},
                "Enabled": {"checkbox": True},
                "Type": {"select": {"name": (type_name or "custom").lower()}},
                "Time": {"rich_text": [{"text": {"content": time_str}}]},
                "Days": {"multi_select": ms_days},
                "TemplateCategory": {"rich_text": [{"text": {"content": template_cat or ''}}]},
                "Text": {"rich_text": [{"text": {"content": text or ''}}]},
            }
        )
        reload_schedule(force=True)
        return "schedule added"
    except Exception as e:
        return f"error: {e}"

def list_schedule_rows():
    if not (notion and NOTION_SCHEDULE_DB):
        return "schedule db not set"
    rows = fetch_schedule_rows()
    if not rows:
        return "no active schedule"
    lines = []
    for r in rows:
        days = ",".join(r.get("days") or [])
        lines.append(f"- {r['time']} | {r['type']} | {days or 'daily'} | {r['title']}")
    return "\n".join(lines)

def exec_command(page: dict):
    global PAUSED, current_city
    props = page.get("properties", {})

    cmd = props.get("Command", {}).get("select", {}).get("name", "")
    text = rt_to_str(props.get("Text", {}).get("rich_text", []))
    city = rt_to_str(props.get("City", {}).get("rich_text", []))
    category = rt_to_str(props.get("Category", {}).get("rich_text", []))

    # –¥–ª—è add_schedule:
    type_name = props.get("Type", {}).get("select", {}).get("name", "")
    time_str = rt_to_str(props.get("Time", {}).get("rich_text", []))
    days_str = rt_to_str(props.get("Days", {}).get("rich_text", []))
    template_cat = rt_to_str(props.get("TemplateCategory", {}).get("rich_text", []))

    result = "ok"

    try:
        if cmd == "send":
            if text.strip():
                safe_send(text.strip())
            else:
                result = "no text"
        elif cmd == "pause":
            PAUSED = True
            result = "paused"
        elif cmd == "resume":
            PAUSED = False
            result = "resumed"
        elif cmd == "set_city":
            if city.strip():
                current_city = city.strip()
                safe_send(f"–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã –æ–±–Ω–æ–≤–ª—ë–Ω: {current_city}")
                result = f"city={current_city}"
            else:
                result = "no city"
        elif cmd == "add_template":
            result = add_template(category, text)
        elif cmd == "add_schedule":
            result = add_schedule_row(type_name, time_str, days_str, template_cat, text)
        elif cmd == "list_schedule":
            summary = list_schedule_rows()
            safe_send("–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Notion:\n" + summary)
            result = "listed"
        elif cmd == "reload_schedule":
            reload_schedule(force=True)
            result = "reloaded"
        else:
            result = f"unknown command: {cmd or '(empty)'}"
    except Exception as e:
        result = f"error: {e}"

    update_command_status(page["id"], result_text=result)

def poll_notion_commands():
    for page in fetch_pending_commands():
        exec_command(page)

# -------- Flask keep-alive
app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

@app.route("/trigger_text")
def trigger_text():
    safe_send("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ö–æ–Ω–Ω–æ—Ä–∞. –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä—è–¥–æ–º.")
    return "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run, daemon=True)
    t.start()

if __name__ == "__main__":
    keep_alive()
    print("–ë–æ—Ç –ö–æ–Ω–Ω–æ—Ä –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞...")

    while True:
        now = datetime.now(seoul_tz)
        current_hour = now.hour
        current_minute = now.minute

        # –∞–≤—Ç–æ-–ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Notion —Ä–∞–∑ –≤ SCHEDULE_REFRESH_SEC
        reload_schedule(force=False)

        # —Ç–≤–æ–∏ —Å–ª–æ—Ç—ã (–∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥)
        if current_minute != last_minute:
            last_minute = current_minute

            if current_hour == 8 and current_minute == 0:
                send_morning()
            elif current_hour == 22 and current_minute == 0:
                send_evening()
            elif current_hour == 8 and current_minute == 30:
                send_weather()
            elif current_hour % 2 == 0 and current_minute == 15:
                send_day_message()

            # + –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Notion (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
            run_scheduled_from_notion(now)

        # –∫–æ–º–∞–Ω–¥—ã –∏–∑ Notion
        if notion and NOTION_COMMANDS_DB:
            try:
                poll_notion_commands()
            except Exception:
                pass

        time.sleep(20)



